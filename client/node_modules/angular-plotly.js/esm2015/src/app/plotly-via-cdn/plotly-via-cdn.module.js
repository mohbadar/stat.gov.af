/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { PlotComponent } from '../shared/plot/plot.component';
import { PlotlyService } from '../shared/plotly.service';
import { SharedModule } from '../shared/shared.module';
// @dynamic
export class PlotlyViaCDNModule {
    /**
     * @param {?} plotlyService
     */
    constructor(plotlyService) {
        this.plotlyService = plotlyService;
        PlotlyService.setModuleName('ViaCDN');
    }
    /**
     * @param {?} version
     * @return {?}
     */
    static set plotlyVersion(version) {
        /** @type {?} */
        const isOk = version === 'latest' || /^\d\.\d{1,2}\.\d{1,2}$/.test(version);
        if (!isOk) {
            throw new Error(`Invalid plotly version. Please set 'latest' or version number (i.e.: 1.4.3)`);
        }
        PlotlyViaCDNModule.loadViaCDN();
        PlotlyViaCDNModule._plotlyVersion = version;
    }
    /**
     * @param {?} bundle
     * @return {?}
     */
    static set plotlyBundle(bundle) {
        /** @type {?} */
        const isOk = bundle === null || PlotlyViaCDNModule.plotlyBundleNames.indexOf(bundle) >= 0;
        if (!isOk) {
            /** @type {?} */
            const names = PlotlyViaCDNModule.plotlyBundleNames.map(n => `"${n}"`).join(', ');
            throw new Error(`Invalid plotly bundle. Please set to null for full or ${names} for a partial bundle.`);
        }
        PlotlyViaCDNModule._plotlyBundle = bundle;
    }
    /**
     * @return {?}
     */
    static loadViaCDN() {
        PlotlyService.setPlotly('waiting');
        /** @type {?} */
        const init = () => {
            /** @type {?} */
            const src = PlotlyViaCDNModule._plotlyBundle == null
                ? `https://cdn.plot.ly/plotly-${PlotlyViaCDNModule._plotlyVersion}.min.js`
                : `https://cdn.plot.ly/plotly-${PlotlyViaCDNModule._plotlyBundle}-${PlotlyViaCDNModule._plotlyVersion}.min.js`;
            /** @type {?} */
            const script = document.createElement('script');
            script.type = 'text/javascript';
            script.src = src;
            script.onerror = () => console.error(`Error loading plotly.js library from ${src}`);
            /** @type {?} */
            const head = document.getElementsByTagName('head')[0];
            head.appendChild(script);
            /** @type {?} */
            let counter = 200;
            // equivalent of 10 seconds...
            /** @type {?} */
            const fn = () => {
                /** @type {?} */
                const plotly = ((/** @type {?} */ (window))).Plotly;
                if (plotly) {
                    PlotlyService.setPlotly(plotly);
                }
                else if (counter > 0) {
                    counter--;
                    setTimeout(fn, 50);
                }
                else {
                    throw new Error(`Error loading plotly.js library from ${src}. Timeout.`);
                }
            };
            fn();
        };
        setTimeout(init);
    }
    /**
     * @param {?} config
     * @return {?}
     */
    static forRoot(config) {
        /** @type {?} */
        const url = "https://github.com/plotly/angular-plotly.js#customizing-the-plotlyjs-bundle";
        throw new Error(`[PlotlyViaCDNModule] forRoot method is deprecated. Please see: ${url}`);
    }
}
PlotlyViaCDNModule._plotlyBundle = null;
PlotlyViaCDNModule._plotlyVersion = 'latest';
PlotlyViaCDNModule.plotlyBundleNames = ['basic', 'cartesian', 'geo', 'gl3d', 'gl2d', 'mapbox', 'finance'];
PlotlyViaCDNModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, SharedModule],
                declarations: [],
                exports: [PlotComponent]
            },] }
];
/** @nocollapse */
PlotlyViaCDNModule.ctorParameters = () => [
    { type: PlotlyService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    PlotlyViaCDNModule._plotlyBundle;
    /**
     * @type {?}
     * @private
     */
    PlotlyViaCDNModule._plotlyVersion;
    /** @type {?} */
    PlotlyViaCDNModule.plotlyBundleNames;
    /** @type {?} */
    PlotlyViaCDNModule.prototype.plotlyService;
}
//# sourceMappingURL=data:application/json;base64,