/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class PlotlyService {
    /**
     * @param {?} moduleName
     * @return {?}
     */
    static setModuleName(moduleName) {
        PlotlyService._moduleName = moduleName;
    }
    /**
     * @param {?} plotly
     * @return {?}
     */
    static setPlotly(plotly) {
        PlotlyService._plotly = plotly;
    }
    /**
     * @param {?} instance
     * @return {?}
     */
    static insert(instance) {
        /** @type {?} */
        const index = PlotlyService.instances.indexOf(instance);
        if (index === -1) {
            PlotlyService.instances.push(instance);
        }
        return instance;
    }
    /**
     * @param {?} div
     * @return {?}
     */
    static remove(div) {
        /** @type {?} */
        const index = PlotlyService.instances.indexOf(div);
        if (index >= 0) {
            PlotlyService.instances.splice(index, 1);
            PlotlyService._plotly.purge(div);
        }
    }
    /**
     * @param {?} id
     * @return {?}
     */
    getInstanceByDivId(id) {
        for (const instance of PlotlyService.instances) {
            if (instance && instance.id === id) {
                return instance;
            }
        }
        return undefined;
    }
    /**
     * @return {?}
     */
    getPlotly() {
        if (typeof PlotlyService._plotly === 'undefined') {
            /** @type {?} */
            const msg = PlotlyService._moduleName === 'ViaCDN'
                ? `Error loading Peer dependency plotly.js from CDN url`
                : `Peer dependency plotly.js isn't installed`;
            throw new Error(msg);
        }
        return PlotlyService._plotly;
    }
    /**
     * @protected
     * @param {?} fn
     * @return {?}
     */
    waitFor(fn) {
        return new Promise((resolve) => {
            /** @type {?} */
            const localFn = () => {
                fn() ? resolve() : setTimeout(localFn, 10);
            };
            localFn();
        });
    }
    // tslint:disable max-line-length
    /**
     * @param {?} div
     * @param {?} data
     * @param {?=} layout
     * @param {?=} config
     * @param {?=} frames
     * @return {?}
     */
    newPlot(div, data, layout, config, frames) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.waitFor(() => this.getPlotly() !== 'waiting');
            if (frames) {
                /** @type {?} */
                const obj = { data, layout, config, frames };
                return (/** @type {?} */ (this.getPlotly().newPlot(div, obj).then(() => PlotlyService.insert((/** @type {?} */ (div))))));
            }
            return (/** @type {?} */ (this.getPlotly().newPlot(div, data, layout, config).then(() => PlotlyService.insert((/** @type {?} */ (div))))));
        });
    }
    /**
     * @param {?} div
     * @param {?} data
     * @param {?=} layout
     * @param {?=} config
     * @param {?=} frames
     * @return {?}
     */
    plot(div, data, layout, config, frames) {
        if (frames) {
            /** @type {?} */
            const obj = { data, layout, config, frames };
            return (/** @type {?} */ (this.getPlotly().plot(div, obj)));
        }
        return (/** @type {?} */ (this.getPlotly().plot(div, data, layout, config)));
    }
    /**
     * @param {?} div
     * @param {?} data
     * @param {?=} layout
     * @param {?=} config
     * @param {?=} frames
     * @return {?}
     */
    update(div, data, layout, config, frames) {
        if (frames) {
            /** @type {?} */
            const obj = { data, layout, config, frames };
            return (/** @type {?} */ (this.getPlotly().react(div, obj)));
        }
        return (/** @type {?} */ (this.getPlotly().react(div, data, layout, config)));
    }
    // tslint:enable max-line-length
    /**
     * @param {?} div
     * @return {?}
     */
    resize(div) {
        return this.getPlotly().Plots.resize(div);
    }
}
PlotlyService.instances = [];
PlotlyService._plotly = undefined;
PlotlyService._moduleName = undefined;
PlotlyService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */ PlotlyService.ngInjectableDef = i0.defineInjectable({ factory: function PlotlyService_Factory() { return new PlotlyService(); }, token: PlotlyService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @protected
     */
    PlotlyService.instances;
    /**
     * @type {?}
     * @protected
     */
    PlotlyService._plotly;
    /**
     * @type {?}
     * @protected
     */
    PlotlyService._moduleName;
}
//# sourceMappingURL=data:application/json;base64,