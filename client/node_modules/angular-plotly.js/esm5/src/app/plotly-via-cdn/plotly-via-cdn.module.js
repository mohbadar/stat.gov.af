/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { PlotComponent } from '../shared/plot/plot.component';
import { PlotlyService } from '../shared/plotly.service';
import { SharedModule } from '../shared/shared.module';
// @dynamic
var PlotlyViaCDNModule = /** @class */ (function () {
    function PlotlyViaCDNModule(plotlyService) {
        this.plotlyService = plotlyService;
        PlotlyService.setModuleName('ViaCDN');
    }
    Object.defineProperty(PlotlyViaCDNModule, "plotlyVersion", {
        set: /**
         * @param {?} version
         * @return {?}
         */
        function (version) {
            /** @type {?} */
            var isOk = version === 'latest' || /^\d\.\d{1,2}\.\d{1,2}$/.test(version);
            if (!isOk) {
                throw new Error("Invalid plotly version. Please set 'latest' or version number (i.e.: 1.4.3)");
            }
            PlotlyViaCDNModule.loadViaCDN();
            PlotlyViaCDNModule._plotlyVersion = version;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PlotlyViaCDNModule, "plotlyBundle", {
        set: /**
         * @param {?} bundle
         * @return {?}
         */
        function (bundle) {
            /** @type {?} */
            var isOk = bundle === null || PlotlyViaCDNModule.plotlyBundleNames.indexOf(bundle) >= 0;
            if (!isOk) {
                /** @type {?} */
                var names = PlotlyViaCDNModule.plotlyBundleNames.map(function (n) { return "\"" + n + "\""; }).join(', ');
                throw new Error("Invalid plotly bundle. Please set to null for full or " + names + " for a partial bundle.");
            }
            PlotlyViaCDNModule._plotlyBundle = bundle;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PlotlyViaCDNModule.loadViaCDN = /**
     * @return {?}
     */
    function () {
        PlotlyService.setPlotly('waiting');
        /** @type {?} */
        var init = function () {
            /** @type {?} */
            var src = PlotlyViaCDNModule._plotlyBundle == null
                ? "https://cdn.plot.ly/plotly-" + PlotlyViaCDNModule._plotlyVersion + ".min.js"
                : "https://cdn.plot.ly/plotly-" + PlotlyViaCDNModule._plotlyBundle + "-" + PlotlyViaCDNModule._plotlyVersion + ".min.js";
            /** @type {?} */
            var script = document.createElement('script');
            script.type = 'text/javascript';
            script.src = src;
            script.onerror = function () { return console.error("Error loading plotly.js library from " + src); };
            /** @type {?} */
            var head = document.getElementsByTagName('head')[0];
            head.appendChild(script);
            /** @type {?} */
            var counter = 200;
            // equivalent of 10 seconds...
            /** @type {?} */
            var fn = function () {
                /** @type {?} */
                var plotly = ((/** @type {?} */ (window))).Plotly;
                if (plotly) {
                    PlotlyService.setPlotly(plotly);
                }
                else if (counter > 0) {
                    counter--;
                    setTimeout(fn, 50);
                }
                else {
                    throw new Error("Error loading plotly.js library from " + src + ". Timeout.");
                }
            };
            fn();
        };
        setTimeout(init);
    };
    /**
     * @param {?} config
     * @return {?}
     */
    PlotlyViaCDNModule.forRoot = /**
     * @param {?} config
     * @return {?}
     */
    function (config) {
        /** @type {?} */
        var url = "https://github.com/plotly/angular-plotly.js#customizing-the-plotlyjs-bundle";
        throw new Error("[PlotlyViaCDNModule] forRoot method is deprecated. Please see: " + url);
    };
    PlotlyViaCDNModule._plotlyBundle = null;
    PlotlyViaCDNModule._plotlyVersion = 'latest';
    PlotlyViaCDNModule.plotlyBundleNames = ['basic', 'cartesian', 'geo', 'gl3d', 'gl2d', 'mapbox', 'finance'];
    PlotlyViaCDNModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, SharedModule],
                    declarations: [],
                    exports: [PlotComponent]
                },] }
    ];
    /** @nocollapse */
    PlotlyViaCDNModule.ctorParameters = function () { return [
        { type: PlotlyService }
    ]; };
    return PlotlyViaCDNModule;
}());
export { PlotlyViaCDNModule };
if (false) {
    /**
     * @type {?}
     * @private
     */
    PlotlyViaCDNModule._plotlyBundle;
    /**
     * @type {?}
     * @private
     */
    PlotlyViaCDNModule._plotlyVersion;
    /** @type {?} */
    PlotlyViaCDNModule.plotlyBundleNames;
    /** @type {?} */
    PlotlyViaCDNModule.prototype.plotlyService;
}
//# sourceMappingURL=data:application/json;base64,