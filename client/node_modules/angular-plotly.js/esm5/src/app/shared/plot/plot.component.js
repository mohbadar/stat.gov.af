/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ElementRef, EventEmitter, Input, Output, ViewChild, IterableDiffers, KeyValueDiffers, } from '@angular/core';
import { PlotlyService } from '../plotly.service';
// @dynamic
var PlotComponent = /** @class */ (function () {
    function PlotComponent(plotly, iterableDiffers, keyValueDiffers) {
        this.plotly = plotly;
        this.iterableDiffers = iterableDiffers;
        this.keyValueDiffers = keyValueDiffers;
        this.defaultClassName = 'js-plotly-plot';
        this.datarevision = 0;
        this.revision = 0;
        this.debug = false;
        this.useResizeHandler = false;
        this.initialized = new EventEmitter();
        this.update = new EventEmitter();
        this.purge = new EventEmitter();
        this.error = new EventEmitter();
        this.afterExport = new EventEmitter();
        this.afterPlot = new EventEmitter();
        this.animated = new EventEmitter();
        this.animatingFrame = new EventEmitter();
        this.animationInterrupted = new EventEmitter();
        this.autoSize = new EventEmitter();
        this.beforeExport = new EventEmitter();
        this.buttonClicked = new EventEmitter();
        this.click = new EventEmitter();
        this.clickAnnotation = new EventEmitter();
        this.deselect = new EventEmitter();
        this.doubleClick = new EventEmitter();
        this.framework = new EventEmitter();
        this.hover = new EventEmitter();
        this.legendClick = new EventEmitter();
        this.legendDoubleClick = new EventEmitter();
        this.relayout = new EventEmitter();
        this.restyle = new EventEmitter();
        this.redraw = new EventEmitter();
        this.selected = new EventEmitter();
        this.selecting = new EventEmitter();
        this.sliderChange = new EventEmitter();
        this.sliderEnd = new EventEmitter();
        this.sliderStart = new EventEmitter();
        this.transitioning = new EventEmitter();
        this.transitionInterrupted = new EventEmitter();
        this.unhover = new EventEmitter();
        this.eventNames = ['afterExport', 'afterPlot', 'animated', 'animatingFrame', 'animationInterrupted', 'autoSize',
            'beforeExport', 'buttonClicked', 'click', 'clickAnnotation', 'deselect', 'doubleClick', 'framework', 'hover',
            'legendClick', 'legendDoubleClick', 'relayout', 'restyle', 'redraw', 'selected', 'selecting', 'sliderChange',
            'sliderEnd', 'sliderStart', 'transitioning', 'transitionInterrupted', 'unhover'];
    }
    /**
     * @return {?}
     */
    PlotComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.createPlot().then(function () {
            /** @type {?} */
            var figure = _this.createFigure();
            _this.initialized.emit(figure);
        });
    };
    /**
     * @return {?}
     */
    PlotComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (typeof this.resizeHandler === 'function') {
            this.getWindow().removeEventListener('resize', (/** @type {?} */ (this.resizeHandler)));
            this.resizeHandler = undefined;
        }
        /** @type {?} */
        var figure = this.createFigure();
        this.purge.emit(figure);
        PlotlyService.remove(this.plotlyInstance);
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    PlotComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        /** @type {?} */
        var shouldUpdate = false;
        /** @type {?} */
        var revision = changes.revision;
        if (revision && !revision.isFirstChange()) {
            shouldUpdate = true;
        }
        /** @type {?} */
        var debug = changes.debug;
        if (debug && !debug.isFirstChange()) {
            shouldUpdate = true;
        }
        if (shouldUpdate) {
            this.updatePlot();
        }
        this.updateWindowResizeHandler();
    };
    /**
     * @return {?}
     */
    PlotComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var shouldUpdate = false;
        if (this.layoutDiffer) {
            /** @type {?} */
            var layoutHasDiff = this.layoutDiffer.diff(this.layout);
            if (layoutHasDiff) {
                shouldUpdate = true;
            }
        }
        else if (this.layout) {
            this.layoutDiffer = this.keyValueDiffers.find(this.layout).create();
        }
        else {
            this.layoutDiffer = undefined;
        }
        if (this.dataDiffer) {
            /** @type {?} */
            var dataHasDiff = this.dataDiffer.diff(this.data);
            if (dataHasDiff) {
                shouldUpdate = true;
            }
        }
        else if (Array.isArray(this.data)) {
            this.dataDiffer = this.iterableDiffers.find(this.data).create(this.dataDifferTrackBy);
        }
        else {
            this.dataDiffer = undefined;
        }
        if (shouldUpdate && this.plotlyInstance) {
            this.datarevision += 1;
            this.updatePlot();
        }
    };
    /**
     * @return {?}
     */
    PlotComponent.prototype.getWindow = /**
     * @return {?}
     */
    function () {
        return window;
    };
    /**
     * @return {?}
     */
    PlotComponent.prototype.getClassName = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var classes = [this.defaultClassName];
        if (Array.isArray(this.className)) {
            classes = classes.concat(this.className);
        }
        else if (this.className) {
            classes.push(this.className);
        }
        return classes.join(' ');
    };
    /**
     * @return {?}
     */
    PlotComponent.prototype.createPlot = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return this.plotly.newPlot(this.plotEl.nativeElement, this.data, this.layout, this.config, this.frames).then(function (plotlyInstance) {
            _this.plotlyInstance = plotlyInstance;
            _this.getWindow().gd = _this.debug ? plotlyInstance : undefined;
            _this.eventNames.forEach(function (name) {
                /** @type {?} */
                var eventName = "plotly_" + name.toLowerCase();
                plotlyInstance.on(eventName, function (data) { return ((/** @type {?} */ (_this[name]))).emit(data); });
            });
            _this.updateWindowResizeHandler();
        }, function (err) {
            console.error('Error while plotting:', err);
            _this.error.emit(err);
        });
    };
    /**
     * @return {?}
     */
    PlotComponent.prototype.createFigure = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var p = this.plotlyInstance;
        /** @type {?} */
        var figure = {
            data: p.data,
            layout: p.layout,
            frames: p._transitionData ? p._transitionData._frames : null
        };
        return figure;
    };
    /**
     * @return {?}
     */
    PlotComponent.prototype.updatePlot = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.plotlyInstance) {
            /** @type {?} */
            var error = new Error("Plotly component wasn't initialized");
            this.error.emit(error);
            throw error;
        }
        /** @type {?} */
        var layout = tslib_1.__assign({ datarevision: this.datarevision }, this.layout);
        return this.plotly.update(this.plotlyInstance, this.data, layout, this.config, this.frames).then(function () {
            /** @type {?} */
            var figure = _this.createFigure();
            _this.update.emit(figure);
        }, function (err) {
            console.error('Error while updating plot:', err);
            _this.error.emit(err);
        });
    };
    /**
     * @return {?}
     */
    PlotComponent.prototype.updateWindowResizeHandler = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.useResizeHandler) {
            if (this.resizeHandler === undefined) {
                this.resizeHandler = function () { return _this.plotly.resize(_this.plotlyInstance); };
                this.getWindow().addEventListener('resize', (/** @type {?} */ (this.resizeHandler)));
            }
        }
        else {
            if (typeof this.resizeHandler === 'function') {
                this.getWindow().removeEventListener('resize', (/** @type {?} */ (this.resizeHandler)));
                this.resizeHandler = undefined;
            }
        }
    };
    /**
     * @param {?} _
     * @param {?} item
     * @return {?}
     */
    PlotComponent.prototype.dataDifferTrackBy = /**
     * @param {?} _
     * @param {?} item
     * @return {?}
     */
    function (_, item) {
        /** @type {?} */
        var obj = Object.assign({}, item, { uid: '' });
        return JSON.stringify(obj);
    };
    PlotComponent.decorators = [
        { type: Component, args: [{
                    selector: 'plotly-plot',
                    template: "<div #plot [attr.id]=\"divId\" [className]=\"getClassName()\" [ngStyle]=\"style\"></div>",
                    providers: [PlotlyService]
                }] }
    ];
    /** @nocollapse */
    PlotComponent.ctorParameters = function () { return [
        { type: PlotlyService },
        { type: IterableDiffers },
        { type: KeyValueDiffers }
    ]; };
    PlotComponent.propDecorators = {
        plotEl: [{ type: ViewChild, args: ['plot',] }],
        data: [{ type: Input }],
        layout: [{ type: Input }],
        config: [{ type: Input }],
        frames: [{ type: Input }],
        style: [{ type: Input }],
        divId: [{ type: Input }],
        revision: [{ type: Input }],
        className: [{ type: Input }],
        debug: [{ type: Input }],
        useResizeHandler: [{ type: Input }],
        initialized: [{ type: Output }],
        update: [{ type: Output }],
        purge: [{ type: Output }],
        error: [{ type: Output }],
        afterExport: [{ type: Output }],
        afterPlot: [{ type: Output }],
        animated: [{ type: Output }],
        animatingFrame: [{ type: Output }],
        animationInterrupted: [{ type: Output }],
        autoSize: [{ type: Output }],
        beforeExport: [{ type: Output }],
        buttonClicked: [{ type: Output }],
        click: [{ type: Output }],
        clickAnnotation: [{ type: Output }],
        deselect: [{ type: Output }],
        doubleClick: [{ type: Output }],
        framework: [{ type: Output }],
        hover: [{ type: Output }],
        legendClick: [{ type: Output }],
        legendDoubleClick: [{ type: Output }],
        relayout: [{ type: Output }],
        restyle: [{ type: Output }],
        redraw: [{ type: Output }],
        selected: [{ type: Output }],
        selecting: [{ type: Output }],
        sliderChange: [{ type: Output }],
        sliderEnd: [{ type: Output }],
        sliderStart: [{ type: Output }],
        transitioning: [{ type: Output }],
        transitionInterrupted: [{ type: Output }],
        unhover: [{ type: Output }]
    };
    return PlotComponent;
}());
export { PlotComponent };
if (false) {
    /**
     * @type {?}
     * @protected
     */
    PlotComponent.prototype.defaultClassName;
    /** @type {?} */
    PlotComponent.prototype.plotlyInstance;
    /** @type {?} */
    PlotComponent.prototype.resizeHandler;
    /** @type {?} */
    PlotComponent.prototype.layoutDiffer;
    /** @type {?} */
    PlotComponent.prototype.dataDiffer;
    /** @type {?} */
    PlotComponent.prototype.datarevision;
    /** @type {?} */
    PlotComponent.prototype.plotEl;
    /** @type {?} */
    PlotComponent.prototype.data;
    /** @type {?} */
    PlotComponent.prototype.layout;
    /** @type {?} */
    PlotComponent.prototype.config;
    /** @type {?} */
    PlotComponent.prototype.frames;
    /** @type {?} */
    PlotComponent.prototype.style;
    /** @type {?} */
    PlotComponent.prototype.divId;
    /** @type {?} */
    PlotComponent.prototype.revision;
    /** @type {?} */
    PlotComponent.prototype.className;
    /** @type {?} */
    PlotComponent.prototype.debug;
    /** @type {?} */
    PlotComponent.prototype.useResizeHandler;
    /** @type {?} */
    PlotComponent.prototype.initialized;
    /** @type {?} */
    PlotComponent.prototype.update;
    /** @type {?} */
    PlotComponent.prototype.purge;
    /** @type {?} */
    PlotComponent.prototype.error;
    /** @type {?} */
    PlotComponent.prototype.afterExport;
    /** @type {?} */
    PlotComponent.prototype.afterPlot;
    /** @type {?} */
    PlotComponent.prototype.animated;
    /** @type {?} */
    PlotComponent.prototype.animatingFrame;
    /** @type {?} */
    PlotComponent.prototype.animationInterrupted;
    /** @type {?} */
    PlotComponent.prototype.autoSize;
    /** @type {?} */
    PlotComponent.prototype.beforeExport;
    /** @type {?} */
    PlotComponent.prototype.buttonClicked;
    /** @type {?} */
    PlotComponent.prototype.click;
    /** @type {?} */
    PlotComponent.prototype.clickAnnotation;
    /** @type {?} */
    PlotComponent.prototype.deselect;
    /** @type {?} */
    PlotComponent.prototype.doubleClick;
    /** @type {?} */
    PlotComponent.prototype.framework;
    /** @type {?} */
    PlotComponent.prototype.hover;
    /** @type {?} */
    PlotComponent.prototype.legendClick;
    /** @type {?} */
    PlotComponent.prototype.legendDoubleClick;
    /** @type {?} */
    PlotComponent.prototype.relayout;
    /** @type {?} */
    PlotComponent.prototype.restyle;
    /** @type {?} */
    PlotComponent.prototype.redraw;
    /** @type {?} */
    PlotComponent.prototype.selected;
    /** @type {?} */
    PlotComponent.prototype.selecting;
    /** @type {?} */
    PlotComponent.prototype.sliderChange;
    /** @type {?} */
    PlotComponent.prototype.sliderEnd;
    /** @type {?} */
    PlotComponent.prototype.sliderStart;
    /** @type {?} */
    PlotComponent.prototype.transitioning;
    /** @type {?} */
    PlotComponent.prototype.transitionInterrupted;
    /** @type {?} */
    PlotComponent.prototype.unhover;
    /** @type {?} */
    PlotComponent.prototype.eventNames;
    /** @type {?} */
    PlotComponent.prototype.plotly;
    /** @type {?} */
    PlotComponent.prototype.iterableDiffers;
    /** @type {?} */
    PlotComponent.prototype.keyValueDiffers;
}
//# sourceMappingURL=data:application/json;base64,