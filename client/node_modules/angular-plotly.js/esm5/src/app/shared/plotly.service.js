/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
var PlotlyService = /** @class */ (function () {
    function PlotlyService() {
    }
    /**
     * @param {?} moduleName
     * @return {?}
     */
    PlotlyService.setModuleName = /**
     * @param {?} moduleName
     * @return {?}
     */
    function (moduleName) {
        PlotlyService._moduleName = moduleName;
    };
    /**
     * @param {?} plotly
     * @return {?}
     */
    PlotlyService.setPlotly = /**
     * @param {?} plotly
     * @return {?}
     */
    function (plotly) {
        PlotlyService._plotly = plotly;
    };
    /**
     * @param {?} instance
     * @return {?}
     */
    PlotlyService.insert = /**
     * @param {?} instance
     * @return {?}
     */
    function (instance) {
        /** @type {?} */
        var index = PlotlyService.instances.indexOf(instance);
        if (index === -1) {
            PlotlyService.instances.push(instance);
        }
        return instance;
    };
    /**
     * @param {?} div
     * @return {?}
     */
    PlotlyService.remove = /**
     * @param {?} div
     * @return {?}
     */
    function (div) {
        /** @type {?} */
        var index = PlotlyService.instances.indexOf(div);
        if (index >= 0) {
            PlotlyService.instances.splice(index, 1);
            PlotlyService._plotly.purge(div);
        }
    };
    /**
     * @param {?} id
     * @return {?}
     */
    PlotlyService.prototype.getInstanceByDivId = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var e_1, _a;
        try {
            for (var _b = tslib_1.__values(PlotlyService.instances), _c = _b.next(); !_c.done; _c = _b.next()) {
                var instance = _c.value;
                if (instance && instance.id === id) {
                    return instance;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return undefined;
    };
    /**
     * @return {?}
     */
    PlotlyService.prototype.getPlotly = /**
     * @return {?}
     */
    function () {
        if (typeof PlotlyService._plotly === 'undefined') {
            /** @type {?} */
            var msg = PlotlyService._moduleName === 'ViaCDN'
                ? "Error loading Peer dependency plotly.js from CDN url"
                : "Peer dependency plotly.js isn't installed";
            throw new Error(msg);
        }
        return PlotlyService._plotly;
    };
    /**
     * @protected
     * @param {?} fn
     * @return {?}
     */
    PlotlyService.prototype.waitFor = /**
     * @protected
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        return new Promise(function (resolve) {
            /** @type {?} */
            var localFn = function () {
                fn() ? resolve() : setTimeout(localFn, 10);
            };
            localFn();
        });
    };
    // tslint:disable max-line-length
    // tslint:disable max-line-length
    /**
     * @param {?} div
     * @param {?} data
     * @param {?=} layout
     * @param {?=} config
     * @param {?=} frames
     * @return {?}
     */
    PlotlyService.prototype.newPlot = 
    // tslint:disable max-line-length
    /**
     * @param {?} div
     * @param {?} data
     * @param {?=} layout
     * @param {?=} config
     * @param {?=} frames
     * @return {?}
     */
    function (div, data, layout, config, frames) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var obj;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.waitFor(function () { return _this.getPlotly() !== 'waiting'; })];
                    case 1:
                        _a.sent();
                        if (frames) {
                            obj = { data: data, layout: layout, config: config, frames: frames };
                            return [2 /*return*/, (/** @type {?} */ (this.getPlotly().newPlot(div, obj).then(function () { return PlotlyService.insert((/** @type {?} */ (div))); })))];
                        }
                        return [2 /*return*/, (/** @type {?} */ (this.getPlotly().newPlot(div, data, layout, config).then(function () { return PlotlyService.insert((/** @type {?} */ (div))); })))];
                }
            });
        });
    };
    /**
     * @param {?} div
     * @param {?} data
     * @param {?=} layout
     * @param {?=} config
     * @param {?=} frames
     * @return {?}
     */
    PlotlyService.prototype.plot = /**
     * @param {?} div
     * @param {?} data
     * @param {?=} layout
     * @param {?=} config
     * @param {?=} frames
     * @return {?}
     */
    function (div, data, layout, config, frames) {
        if (frames) {
            /** @type {?} */
            var obj = { data: data, layout: layout, config: config, frames: frames };
            return (/** @type {?} */ (this.getPlotly().plot(div, obj)));
        }
        return (/** @type {?} */ (this.getPlotly().plot(div, data, layout, config)));
    };
    /**
     * @param {?} div
     * @param {?} data
     * @param {?=} layout
     * @param {?=} config
     * @param {?=} frames
     * @return {?}
     */
    PlotlyService.prototype.update = /**
     * @param {?} div
     * @param {?} data
     * @param {?=} layout
     * @param {?=} config
     * @param {?=} frames
     * @return {?}
     */
    function (div, data, layout, config, frames) {
        if (frames) {
            /** @type {?} */
            var obj = { data: data, layout: layout, config: config, frames: frames };
            return (/** @type {?} */ (this.getPlotly().react(div, obj)));
        }
        return (/** @type {?} */ (this.getPlotly().react(div, data, layout, config)));
    };
    // tslint:enable max-line-length
    // tslint:enable max-line-length
    /**
     * @param {?} div
     * @return {?}
     */
    PlotlyService.prototype.resize = 
    // tslint:enable max-line-length
    /**
     * @param {?} div
     * @return {?}
     */
    function (div) {
        return this.getPlotly().Plots.resize(div);
    };
    PlotlyService.instances = [];
    PlotlyService._plotly = undefined;
    PlotlyService._moduleName = undefined;
    PlotlyService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */ PlotlyService.ngInjectableDef = i0.defineInjectable({ factory: function PlotlyService_Factory() { return new PlotlyService(); }, token: PlotlyService, providedIn: "root" });
    return PlotlyService;
}());
export { PlotlyService };
if (false) {
    /**
     * @type {?}
     * @protected
     */
    PlotlyService.instances;
    /**
     * @type {?}
     * @protected
     */
    PlotlyService._plotly;
    /**
     * @type {?}
     * @protected
     */
    PlotlyService._moduleName;
}
//# sourceMappingURL=data:application/json;base64,